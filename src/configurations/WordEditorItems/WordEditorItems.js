import React from "react";
import { AiOutlineTable, AiOutlineCode } from "react-icons/ai";
import {
  FaAlignCenter,
  FaAlignJustify,
  FaAlignLeft,
  FaAlignRight,
  FaBold,
  FaCode,
  FaEraser,
  FaHighlighter,
  FaItalic,
  FaListOl,
  FaListUl,
  FaParagraph,
  FaQuoteLeft,
  FaStrikethrough,
} from "react-icons/fa";
import { MdHorizontalRule, MdHorizontalSplit } from "react-icons/md";

const WordEditorItems = ({ editor }) => {
  if (!editor) {
    return [];
  }
  return [
    // {
    //   key: "undo",
    //   TooltipTitle: "undo",
    //   label: "Undo",
    //   icon: <i className="ri-arrow-go-back-fill " style={{ fontSize: 16}}/>,
    //   onClick: () => editor.chain().focus().undo().run(),
    //   isActive: () => editor.isActive("bold"),
    //   canExecute: () => editor.can().chain().focus().undo().run(),
    //   size: "sm",
    //   type: "text",
    //   group: "options",
    // },
    // {
    //   key: "redo",
    //   TooltipTitle: "redo",
    //   label: "Redo",
    //   icon: <i className="ri-arrow-go-forward-fill" style={{ fontSize: 16}}/>,
    //   onClick: () => editor.chain().focus().redo().run(),
    //   isActive: () => editor.isActive("bold"),
    //   canExecute: () => editor.can().chain().focus().redo().run(),
    //   size: "sm",
    //   type: "text",
    //   group: "options",
    // },
    {
      key: "bold",
      TooltipTitle: "Bold",
      label: "Bold",
      icon: <FaBold style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleBold().run(),
      isActive: () => editor.isActive("bold"),
      canExecute: () => editor.can().chain().focus().toggleBold().run(),
      size: "sm",
      type: "text",
      group: "textFormatting",
    },
    {
      key: "italic",
      TooltipTitle: "Italic",
      label: "Italic",
      icon: <FaItalic style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleItalic().run(),
      isActive: () => editor.isActive("italic"),
      canExecute: () => editor.can().chain().focus().toggleItalic().run(),
      size: "sm",
      type: "text",
      group: "textFormatting",
    },
    {
      key: "strike",
      TooltipTitle: "Strike",
      label: "Strike",
      icon: <FaStrikethrough style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleStrike().run(),
      isActive: () => editor.isActive("strike"),
      canExecute: () => editor.can().chain().focus().toggleStrike().run(),
      size: "sm",
      type: "text",
      group: "textFormatting",
    },

    {
      key: "code",
      TooltipTitle: "Code",
      label: "Code",
      icon: <FaCode style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleCode().run(),
      isActive: () => editor.isActive("code"),
      canExecute: () => editor.can().chain().focus().toggleCode().run(),
      size: "sm",
      type: "text",
      group: "textFormatting",
    },
    {
      key: "paragraph",
      TooltipTitle: "Paragraph",
      label: "Paragraph",
      icon: <FaParagraph style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().setParagraph().run(),
      isActive: () => editor.isActive("paragraph"),
      canExecute: null,
      size: "sm",
      type: "text",
      group: "textFormatting",
    },
    {
      key: "bulletList",
      TooltipTitle: "Bullet List",
      label: "Bullet List",
      icon: <FaListUl style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleBulletList().run(),
      isActive: () => editor.isActive("bulletList"),
      canExecute: null,
      size: "sm",
      type: "text",
      group: "ListFormatting",
    },
    {
      key: "orderedList",
      TooltipTitle: "Align left",
      label: "Number List",
      icon: <FaListOl style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleOrderedList().run(),
      isActive: () => editor.isActive("orderedList"),
      canExecute: null,
      size: "sm",
      type: "text",
      group: "ListFormatting",
    },
    {
      key: "alignLeft",
      TooltipTitle: "Align left",
      label: "Align left",
      icon: <FaAlignLeft style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().setTextAlign("left").run(),
      isActive: () => editor.isActive({ textAlign: "left" }),
      canExecute: () => editor.can().chain().focus().setTextAlign("left").run(),
      size: "sm",
      type: "text",
      group: "textAlignment",
    },

    {
      key: "alignCenter",
      TooltipTitle: "Align center",
      label: "Align center",
      icon: <FaAlignCenter style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().setTextAlign("center").run(),
      isActive: () => editor.isActive({ textAlign: "center" }),
      canExecute: () =>
        editor.can().chain().focus().setTextAlign("center").run(),
      size: "sm",
      type: "text",
      group: "textAlignment",
    },
    {
      key: "alignRight",
      TooltipTitle: "Align right",
      label: "Align right",
      icon: <FaAlignRight style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().setTextAlign("right").run(),
      isActive: () => editor.isActive({ textAlign: "right" }),
      canExecute: () =>
        editor.can().chain().focus().setTextAlign("right").run(),
      size: "sm",
      type: "text",
      group: "textAlignment",
    },
    {
      key: "alignJustify",
      TooltipTitle: "Align justify",
      label: "Align justify",
      icon: <FaAlignJustify style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().setTextAlign("justify").run(),
      isActive: () => editor.isActive({ textAlign: "justify" }),
      canExecute: () =>
        editor.can().chain().focus().setTextAlign("justify").run(),
      size: "sm",
      type: "text",
      group: "textAlignment",
    },
    {
      key: "quote",
      TooltipTitle: "Quote",
      label: "Quote",
      icon: <FaQuoteLeft style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleBlockquote().run(),
      isActive: () => editor.isActive("blockquote"),
      canExecute: () => editor.can().chain().focus().toggleBlockquote().run(),
      size: "sm",
      type: "text",
      group: "textAlignment",
    },
    {
      key: "highlight",
      TooltipTitle: "Highlight",
      label: "Highlight",
      icon: <FaHighlighter style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleHighlight().run(),
      isActive: () => editor.isActive("highlight"),
      canExecute: () => editor.can().chain().focus().toggleHighlight().run(),
      size: "sm",
      type: "text",
      group: "additionalFormatting",
    },
    {
      key: "removeMarks",
      TooltipTitle: "Remove Marks",
      label: "Remove Marks",
      icon: <FaEraser style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().unsetAllMarks().run(),
      isActive: () => editor.isActive("allMarks"),
      canExecute: () => editor.can().chain().focus().unsetAllMarks().run(),
      size: "sm",
      type: "text",
      group: "additionalFormatting",
    },
    {
      key: "removeAllEffects",
      TooltipTitle: "Remove All Effect",
      label: "Remove All Effect",
      icon: <FaEraser style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().clearNodes().run(),
      isActive: () => editor.isActive("clearNodes"),
      canExecute: () => editor.can().chain().focus().clearNodes().run(),
      size: "sm",
      type: "text",
      group: "additionalFormatting",
    },
    {
      key: "codeBlock",
      TooltipTitle: "Code Block",
      label: "Code Block",
      icon: <AiOutlineCode style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().toggleCodeBlock().run(),
      isActive: () => editor.isActive("codeBlock"),
      canExecute: () => editor.can().chain().focus().toggleCodeBlock().run(),
      size: "sm",
      type: "text",
      group: "additionalFormatting",
    },
    {
      key: "insertLine",
      TooltipTitle: "Add Line under",
      label: "Add Line under",
      icon: <MdHorizontalRule style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().setHorizontalRule().run(),
      isActive: () => editor.isActive("horizontalRule"),
      canExecute: () => editor.can().chain().focus().setHorizontalRule().run(),
      size: "sm",
      type: "text",
      group: "additionalFormatting",
    },
    {
      key: "hardBreak",
      TooltipTitle: "Break Enter",
      label: "Break Enter",
      icon: <MdHorizontalSplit style={{ fontSize: 16 }} />,
      onClick: () => editor.chain().focus().setHardBreak().run(),
      isActive: () => editor.isActive("hardBreak"),
      canExecute: () => editor.can().chain().focus().setHardBreak().run(),
      size: "sm",
      type: "text",
      group: "additionalFormatting",
    },
    {
      key: "insertTable",
      TooltipTitle: "Insert Table",
      label: "Insert Table",
      icon: <AiOutlineTable style={{ fontSize: 16 }} />,
      onClick: () =>
        editor
          .chain()
          .focus()
          .insertTable({ rows: 3, cols: 3, withHeaderRow: true })
          .run(),
      isActive: () => editor.isActive("table"),
      canExecute: () => editor.can().chain().focus().insertTable().run(),
      size: "sm",
      type: "text",
      group: "additionalFormatting",
    },
  ];
};

export default WordEditorItems;
